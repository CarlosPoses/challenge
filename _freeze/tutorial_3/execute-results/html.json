{
  "hash": "93a6a318df08fb0f1758e8d423802a3b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tutorial 3\"\nsubtitle: \"How to develop, test and publish `R`-packages\"\nauthors:\n  - name: \"Gerko Vink\"\n    orcid: \"0000-0001-9767-1924\"\n  - name: \"Hanne Oberman\"\n    orcid: \"0000-0003-3276-2141\"\neditor: source\n---\n\n\n::: callout-tip\n## Recording of the flow\n\nIf you'd like to revisit this tutorial later on, there exists a recording of the discussion of the outlined flow [here](https://www.dropbox.com/scl/fi/hscfsrh30slk23k7z6d1d/wk6_recording.mp4?rlkey=yhy7wt8ldfmsybbb3000z1hl0&dl=0) (download for the 1h+ recording)\n:::\n\n# `R`-packages\nIt is much easier to create, manage and co-develop an R-package when you incorporate it into a distributed version control system like [Git](https://git-scm.com). The extension to a software development hosting service like [GitHub](https://github.com) is then a natural one. Although there are other procedures, devops systems and hosting services that may lend itself for package development, we outline the workflow with `Git` and `GitHub`. We also assume that you have [`RStudio`](https://posit.co/products/open-source/rstudio/) installed. \n\n### Recap on `Git`\n`Git` is a free and open source version control system for text files. It can handle extensive change logging for you, no matter the size of the project. `Git` is fast and efficient, but its effectiveness depends also on the frequency you instruct it to log your project's changes. \n\nYou can see `Git` as a blank canvas that starts at a certain point in time. Every time you (or others) instruct `Git` to log any changes that have been made, `Git` adds the changes that are made to this canvas. We call the changes to the canvas [`commits`](https://help.github.com/articles/github-glossary/#commit). With every `commit` an extensive log is created that includes at least the following information:\n\n- the changes made\n- who made the changes\n- metadata\n- a small piece of text that describe the changes made\n\nThe difference between two commits - or the changes between them - are called [`diffs`](https://help.github.com/articles/github-glossary/#diff). \n\nIf you'd like to know much more about `Git`, [this online book](https://git-scm.com/book/en/v2) is a very good resource. If you'd like to practice with the command line interface [use this webpage](https://learngitbranching.js.org) for a quick course. [This book](https://happygitwithr.com) covers pretty much everything you need to marry `Git` and `R`. \n\n### Why GitHub\n`GitHub` is the social and user interface to `Git` that allows you to work in [repositories](https://help.github.com/articles/github-glossary/#repository). These repositories can be seen as project folders in which you publish your work, but you can also use them as test sites for development, testing, etcetera. There is a distinction between [private repositories](https://help.github.com/articles/github-glossary/#private-repository) (only for you and those you grant access) and public repositories (visible for everyone). \n\nYour public repositories can be viewed and [forked](https://help.github.com/articles/github-glossary/#fork) by everyone. `Forking` is when other people create a copy of your repository on their own account. This allows them to work on a repository without affecting the `master`. You can also do this yourself, but then the process is called [`branching`](https://help.github.com/articles/github-glossary/#branch) instead of forking. If you create a copy of a repository that is offline, the process is called [`cloning`](https://help.github.com/articles/github-glossary/#clone). \n\n`GitHub`'s ability to branch, fork and clone is very useful as it allows other people and yourself to experiment on (the code in) a repository before any definitive changes are [`merged`](https://help.github.com/articles/github-glossary/#merge) with the `master`. If you're working in a forked repository, you can submit a [`pull request`](https://help.github.com/articles/github-glossary/#pull-request) to the repository collaborators to accept (or reject) any suggested changes. \n\nFor now, this may be confusing, but I hope you recognize the benefits `GitHub` can have on the process of development and bug-fixing. For example, the most up-to-date version of the `mice` package in `R` can be directly installed from the `mice` repository with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"devtools\")\ndevtools::install_github(repo = \"stefvanbuuren/mice\")\n```\n:::\n\n\nYou can see that this process requires package `devtools` that expands the `R` functionality with essential development tools. Loading packages in `R` directly from their respective `GitHub` repositories, allows you to obtain the latest - often improved and less buggy - iteration of that software even before it is published on [`CRAN`](https://cran.r-project.org). \n\n\n### Install `RStudio`\nInstall `RStudio` from [Posit's website](https://posit.co/products/open-source/rstudio/). The free edition will suffice. \n\n## Some R-code\nIn order to demonstrate the creation of an R-package, we will identify some odd behaviour by `R`:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nc(0.5, 1.5, 2.5, 3.5) %>% round()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 2 2 4\n```\n\n\n:::\n:::\n\nWe can see that `R` rounds - by default -  the number `1.5` to integer `2` and the number `2.5` also to integer `2`. The reason for this behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the even digit. \n\nIf we'd like to round up to the next integer, we can easily define the following function:\n\n::: {.cell}\n\n```{.r .cell-code}\nrounder <- function(x){\n  diff <- x - floor(x)\n  out <- x %>% ceiling()\n  out[diff < .5] <- floor(x)[diff < .5]\n  return(out)\n}\n```\n:::\n\nwhere the vector `c(0.5, 1.5, 2.5, 3.5)` is rounded up to the *next* integer\n\n::: {.cell}\n\n```{.r .cell-code}\nc(0.5, 1.5, 2.5, 3.5) %>% rounder()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\nand where the vector `c(0.49, 1.49, 2.49, 3.49)` is rounded down to the *previous* integer\n\n::: {.cell}\n\n```{.r .cell-code}\nc(0.49, 1.49, 2.49, 3.49) %>% rounder()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 2 3\n```\n\n\n:::\n:::\n\n\n## Create `R`-package `roundR`\nThe goal of this document is to create the code for the `rounder()` function into a stand-alone `R`-package with its referenceable [Digital Object Identifier](https://www.doi.org)\n\n### Steps in creating an `R`-package\n\n#### Packages and sources needed\nWe need the following packages to help us with building, testing and maintaining our package:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(devtools) # development tools\nlibrary(usethis)  # automated package and project setup\nlibrary(testthat) # unit testing\n```\n:::\n\n\n#### Preparing the package structure\nWe need a location for our `R`-package. The simplest approach to creating the skeleton for an `R`-package is to use `RStudio`. The following gif outlines this procedure:\n\n<center>\n![](tutorial_3_img/packagefolder.gif){width=90%}\n</center>\n\nWe have now created the necessary structure for an `R`-package. We can see this structure and the generated package files in the `File Pane` in `RStudio`.\n\n<center>\n![](tutorial_3_img/filepane.png){width=90%}\n</center>\n\nThe `R` subfolder contains all the `R`-code for your package and the `man` folder contains all the corresponding `R` manuals. By default, for a new `R`-package generated by `RStudio` the file `hello.R` is generated. \n\n<center>\n![](tutorial_3_img/hellofile.png){width=90%}\n</center>\n\nAs a matter of fact, the skeleton `R`-package is already a fully functional `R`-package. Try installing the package in the `build` pane. \n\n<center>\n![](tutorial_3_img/build.gif){width=90%}\n</center>\n\n#### Add the description\nOpen the file `DESCRIPTION` from the file pane. The following window opens:\n\n<center>\n![](tutorial_3_img/DESCRIPTION.png){width=90%}\n</center><br>\n\nNow, replace the contents of the `DESCRIPTION` file with \n\n::: {.cell}\n\n```{.r .cell-code}\nPackage: roundR\nType: Package\nTitle: Round Numeric Values to the Nearest Integer\nVersion: 0.1.0\nAuthor: Gerko Vink and Hanne Oberman\nMaintainer: Gerko Vink <G.Vink@uu.nl>\nDescription: In R the default choice for rounding follows the IEC 60559 standard where a 5 is expected to be rounded to the even digit. This package offers alternative functionality to round to the closest integer. \nLicense: No LiCeNsE YeT\nEncoding: UTF-8\nLazyData: true\n```\n:::\n\nThe `DESCRIPTION` file governs the information about the licence, authors, contributors, maintainers, etcetera. The argument `lazyData: true` indicates that data sets should be lazily loaded. This means that data will not occupy any memory unless it is needed. This is a good argument to have as default.\n\nWe also need to set a license. Running the following code from package `usethis` will write a permissive MIT license to the description file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_mit_license()\n```\n:::\n\n\n\nDon't forget to save the updated DESCRIPTION file and change our names to your name. \n\n#### Add the functional code\nNow it is time to extend the package with the functionality we promised in our updated `DESCRIPTION`. To do so, we start a new file names `rounder.R` by either manually creating it in the `R` sub folder, or by running the following code evaluation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_r(\"rounder\")\n```\n:::\n\n\nThe `use_r()` function from the `usethis` package is very convenient, because it creates the necessary file in the correct location and opens the file in the editor pane. \n\n<center>\n![](tutorial_3_img/use_r.gif){width=90%}\n</center><br>\n\nNow that we have created the file for our functional code, we can start building the code file. The most flexible approach to creating and maintaining a package is to use `roxygen2`. The `roxygen2` package is a convenient in-line documentation convention that generates your `Rd` documentation, `NAMESPACE` file, and much more for you. Remember that `man` folder in our package root? That contains all documentation files. However, you can imagine if we have two seperate locations for our `R`-code and our `Rd` help files, that at some point the code and documentation might get out of sync. For example, if we update the code, but forget to reflect changes in our manual, the usability of our package may be at stake and documentation to end-users might get confusing. Most of all, it would be a lot of work for us to maintain multiple linked files in multiple locations. `roxygen2` solves this for us by extracting the documentation from our `R`-code file. The only thing we need to do is maintain a single file. \n\nTo start with `roxygen2` in our package, we need to instruct the package to use `roxygen2` from now on:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_roxygen_md()\n```\n:::\n\n\nThe above call will add the following lines to our `DESCRIPTION` file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n```\n:::\n\n\nWe mentioned before that the `roxygen2` engine expects the function documentation in the same file as the function code. A good starting point for that documentation is the following block:\n\n::: {.cell}\n\n```{.r .cell-code}\n#' A short description of your function\n#' \n#' @param x The first argument to be governed by the letter x.\n#' @param y The second argument to denoted by the letter y.\n#' @returns a short description of the expected return.\n#' @examples\n#' examplecode 1\n#' examplecode 2\n```\n:::\n\nIn `R`, when you have executed `usethis::use_r()` and have filled in your `R` code, you can run `Code > Insert Roxygen Skeleton` to automatically create the relevant roxygen documentation. For our function `rounder()` - with some customization and examples, this could result in the following `rounder.R` code file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Round to the nearest integer\n#'\n#'Function \\code{\\link{base::round}} rounds - by default -  the number `1.5` to\n#'integer `2` and the number `2.5` also to integer `2`. The reason for this\n#'behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the\n#'even digit. This function provides an integer rounding alternative to\n#'\\code{\\link{base::round}}.\n#'\n#' @param x A numeric element or vector to round to the nearest integer\n#' @returns An integer element or vector\n#' @author Gerko Vink \\email{g.vink@uu.nl} and Hanne Oberman \\email{h.i.oberman@uu.nl}\n#' @examples\n#' # rounds weirdly\n#' c(0.5, 1.5, 2.5, 3.5) %>% round()\n#' # rounds correctly\n#' c(0.5, 1.5, 2.5, 3.5) %>% rounder()\n#'\nrounder <- function(x) {\n  diff <- x - floor(x)\n  out <- x %>% ceiling()\n  out[diff < .5] <- floor(x)[diff < .5]\n  return(out)\n}\n```\n:::\n\nYou can copy the above code chunk to your `rounder.R` file. A good source to find inspiration for writing `roxygen2` documentation is [the `roxygen2` reference page](https://roxygen2.r-lib.org/articles/roxygen2.html).\n\nNow that we have a working `rounder.R` file with documentation included, we can build the documentation. A good wrapper function to build all documentation in your package is the following code evaluation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::document()\n```\n:::\n\n\n<center>\n![](tutorial_3_img/devtools.gif){width=90%}\n</center><br>\n\nThe `document()` function from the `devtools` package will build all documentation for all files that use `roxygen2` and it will build the `NAMESPACE` of your package accordingly. If you encounter the following message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSkipping NAMESPACE\n✖ It already exists and was not generated by roxygen2. \n```\n:::\n\n\njust remove the `NAMESPACE` file and re-run the `document()` function. \n\nWe can now remove the `R/hello.R` and `man/hello.Rd` files as they are not supposed to be part of our package\n\n#### Building and checking\nLet's check the functionality of our package. \n\n<center>\n![](tutorial_3_img/check.gif){width=90%}\n</center><br>\n\nWe can see under `build > check` that our current package yields 1 error, 1 warning and 1 note. \n\n##### Error\n\n::: {.cell}\n\n```{.r .cell-code}\n❯ checking examples ... ERROR\n  Running examples in ‘roundR-Ex.R’ failed\n  The error most likely occurred in:\n\n    ...\n  \n  > c(0.5, 1.5, 2.5, 3.5) %>% round()\n  Error in c(0.5, 1.5, 2.5, 3.5) %>% round() : \n    could not find function \"%>%\"\n  Execution halted\n```\n:::\n\n\nThe error stems from the examples in our documentation. The examples use the binary function `%>%` from package `magrittr`, but we did not load that package in the example. Remember that these examples are self-contained and that any dependent packages need to be explicitly loaded via `library()` for the code to run. Just like any other `R` instance. Simply adding `library(magrittr)` to the example code will solve the issue. \n\nAdd `library(magrittr)` to the example code:\n\n::: {.cell}\n\n```{.r .cell-code}\n#' @examples\n#' library(magrittr)\n#' # rounds weirdly\n#' c(0.5, 1.5, 2.5, 3.5) %>% round()\n#' # rounds correctly\n#' c(0.5, 1.5, 2.5, 3.5) %>% rounder()\n```\n:::\n\n\n##### Warning\n\n::: {.cell}\n\n```{.r .cell-code}\n❯ checking Rd cross-references ... WARNING\n  Missing link or links in documentation object 'rounder.Rd':\n    ‘base::round’\n  \n  See section 'Cross-references' in the 'Writing R Extensions' manual.\n```\n:::\n\n\nThe error stems from the crossreference we attempted in our documentation. The proper way to refer to function `round()` from package `base` is not with `\\link{base::round}`, but with `\\link[base]{round}` following the structure `\\link[package]{function}`. We could have opted for not referencing, or linking the `round()` function at all, but this would not align with open and inclusive development conventions. \n\nCorrect the faulty crossreferences in the documentation:\n\n::: {.cell}\n\n```{.r .cell-code}\n#'Function \\code{\\link[base]{round}} rounds - by default -  the number `1.5` to\n#'integer `2` and the number `2.5` also to integer `2`. The reason for this\n#'behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the\n#'even digit. This function provides an integer rounding alternative to\n#'\\code{\\link[base]{round}}.\n```\n:::\n\n\n##### Note\n\n::: {.cell}\n\n```{.r .cell-code}\n❯ checking R code for possible problems ... NOTE\n  rounder: no visible global function definition for ‘%>%’\n  Undefined global functions or variables:\n    %>%\n```\n:::\n\n\nWe use function `%>%` from package `magrittr`, but we neglected to make explicit that this function should have been imported from package `magrittr`. In other words, `R` needs to know that our package `roundR` would depend on package `magrittr` for its functionality to work. \n\nWe can fix this by runnin the following `usethis` evaluation in the console:\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_import_from(\"magrittr\", \"%>%\")\n```\n:::\n\n\nWhen asked\n\n::: {.cell}\n\n```{.r .cell-code}\n`use_import_from()` requires package-level documentation.\nWould you like to add it now?\n\n1: For sure\n2: Not now\n3: No way\n```\n:::\n\nchoose the fun option that would add it (i.e. `For Sure`, `Yes`, `Absolutely`, etc). These options change every time you re-run the function code, so read it carefully!\n\nOnce you have selected the correct option, we can re-run the `CHECK`. You will find that there still persists an error in the example:\n\n::: {.cell}\n\n```{.r .cell-code}\n❯ checking examples ... ERROR\n  Running examples in ‘roundR-Ex.R’ failed\n  The error most likely occurred in:\n  \n  ...\n  \n  > c(0.5, 1.5, 2.5, 3.5) %>% rounder()\n  Error in rounder(.) : could not find function \"rounder\"\n  Calls: %>%\n  Execution halted\n```\n:::\n\n\nOur package `CHECK` cannot find function `rounder()`. That may seem weird, since it is the only function in our package. The thing is - we have not explicitly told `roxygen2` to `export` our function, i.e. to make our function available outside of the package namespace. Simply adding `@export` to the `rounder.R` file would solve this error:\n\n::: {.cell}\n\n```{.r .cell-code}\n...\n#' @author Gerko Vink \\email{g.vink@uu.nl} and Hanne Oberman \\email{h.i.oberman@uu.nl}\n#' @export\n#' @examples\n#' library(magrittr)\n...\n```\n:::\n\n\nTry re-running the `CHECK` to see if you hit three green check marks (NO errors, warnings and notes). If all is well, you'll see:\n\n::: {.cell}\n\n```{.r .cell-code}\n── R CMD check results ────────────────────────────────────────── roundR 0.1.0 ────\nDuration: 6.6s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\n\nR CMD check succeeded\n```\n:::\n\n\n#### Increasing the version\nNow that we have a working package with a succesfull `R CMD check`, we might think about updating the version of the package. After all, a lot has changed since the last version got defined at the start of our development journey. \n\nThe easiest means to increasing the version to `0.2.0` (indicating a minor update) is to use\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_version()\n```\n:::\n\nYou will be presented with something like:\n\n::: {.cell}\n\n```{.r .cell-code}\n✔ Setting active project to '/Users/gerko/surfdrive/Werk/GitHub/roundR/roundR'\nCurrent version is 0.1.1.\nWhat should the new version be? (0 to exit) \n\n1: major --> 1.0.0\n2: minor --> 0.2.0\n3: patch --> 0.1.2\n4:   dev --> 0.1.1.9000\n\nSelection: 2\n✔ Setting Version field in DESCRIPTION to '0.2.0'\nThere is 1 uncommitted file:\n* 'DESCRIPTION'\nIs it ok to commit it?\n\n1: For sure\n2: Negative\n3: Nope\n\nSelection: 1\n✔ Adding files\n✔ Making a commit with message 'Increment version number to 0.2.0'\n```\n:::\n\n\nThe question `Is it ok to commit it?` is related to `Git`. Please click to commit the version increase. For reasons of brevity and simplicity, we will leave a thorough discussion of incremental `Git` commits for now and demonstrate to use of `Git` and `GitHub` at the end of this walkthrough. \n\n#### Add tests\nThe next step for a mature package is to include tests. Every function should have functional tests. The `testthat` package is geared to that. Make sure that you have the `rounder.R` file open in the `Source` pane and run:\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_test()\n```\n:::\n\n\nThe proper structure for test files has now been created:\n\n::: {.cell}\n\n```{.r .cell-code}\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n✔ Writing 'tests/testthat/test-rounder.R'\n• Modify 'tests/testthat/test-rounder.R'\n```\n:::\n\n\nYou are asked to modify the `tests/testthat/test-rounder.R` file. Replace the example test with:\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"rounder works\", {\n  A <- c(0.5, 1.5, 2.5, 3.5) %>% rounder()\n  B <- c(0.49, 1.49, 2.49, 3.49) %>% rounder()\n  expect_equal(A, c(1, 2, 3, 4))\n  expect_equal(B, c(0, 1, 2, 3))\n})\n\ntest_that(\"rounder yields different results than round\", {\n  vec1 <- c(0.5, 1.5, 2.5, 3.5)\n  vec2 <- c(0.499999999999999999995,\n            1.499999999999999999995,\n            2.499999999999999999995,\n            3.499999999999999999995)\n  A <- vec1 %>% rounder()\n  B <- vec1 %>% round()\n  C <- vec2 %>% rounder()\n  D <- vec2 %>% round()\n  expect_false(identical(A, B))\n  expect_false(identical(C, D))\n})\n```\n:::\n\n\nClick the `Test` button in the `build` pane:\n\n<center>\n![](tutorial_3_img/test.gif){width=90%}\n</center>\nAll test should pass, meaning that your `rounder()` function yields correct results (test 1) that differ fundamentally from the results obtained with `round()` (test 2). \n\nIf test would fail, you'd be notified. For example\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_that(\"rounder works\", {\n  A <- c(0.5, 1.5, 2.5, 3.5) %>% rounder()\n  expect_equal(A, c(4, 3, 2, 1))\n  })\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n── Failure: rounder works ──────────────────────────────────────────────────────\n`A` not equal to c(4, 3, 2, 1).\n4/4 mismatches (average diff: 2)\n[1] 1 - 4 == -3\n[2] 2 - 3 == -1\n[3] 3 - 2 ==  1\n[4] 4 - 1 ==  3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-error}\n\n```\nError:\n! Test failed\n```\n\n\n:::\n:::\n\n\n\nFortunately, our test all passed. Now rerun the `R CMD check`. If all is well you'll receive confirmation of a successful check.\n\n#### Publishing to GitHub\n\n**This section assumes that you are logged into your GitHub account. If you have trouble realizing this, [GitHub has a great step-by-step walkthrough](https://docs.github.com/en/desktop/installing-and-configuring-github-desktop/installing-and-authenticating-to-github-desktop)**. \n\nLet's publish our `R`-package to `GitHub`. To do so, we need to perform two steps. First, we must log (commit) our changes to the `Git` distributed version control system. This stores the file changes to our own machine. Next we must link our local `Git` to a remote online repository on `GitHub`. Luckily, with `GitHub Desktop`, we can perform all these steps in a single window interface. \n\nLet's start by adding our `R`-package to `GitHub desktop`. Remember that we already started the package in `RStudio` as a `Git` repository, so we only have to point `GitHub desktop` to the correct directory.\n<center>\n![](tutorial_3_img/addgitrepo.gif){width=90%}\n</center>\n\nNext, we commit the changes. This means that we save the state of files for a moment in time, so that we can always revert to that state and see how the files changed with respect to the previous state. \n<center>\n![](tutorial_3_img/commit.gif){width=90%}\n</center>\nNaturally, you would not only do this at the start (when `RStudio` created the `Git` repository) and end (when we have a working package), but at regular and informative intervals. For example, when you add a function, a test, a help file, a license, etcetera. \n\nNow that we have commited our package, we can publish it on `GitHub`.\n<center>\n![](tutorial_3_img/publish_gh.gif){width=90%}\n</center>\n\nTry your online `GitHub` repositories at [https://github.com](https://github.com). You will see your package there and that the license is automatically recognized. You will also see that you are in the `main` branch. By default, that will be the live version of your package. Now that your package is live, it would be nice to add a `Readme` file that informs visitors to your repository. But we will extend our workflow with a good behaviour: not working in the `main` branch. We would not want to accidentally overwrite or break the functionality of our package, just because we were working in the same branch. So let's add a `Readme` to a new `development` branch.\n<center>\n![](tutorial_3_img/addreadme.gif){width=90%}\n</center>\n\nWhen we commit the new `Readme` file to the `development` branch, a new window opens to propose the `pull request` (PR). The PR is nothing more than a request to the package developers to pull your proposed changes into (usually) the `main` branch of the software. \nSince we are the developers, we have to both create and accept the PR. \n<center>\n![](tutorial_3_img/openpr.gif){width=90%}\n</center>\n\nIt is good procedure to write an informative PR message, usually outlining the nature and rationale of the changes. I also demonstrate how to accept a PR, thereby approving the changes per file (only one now) and signing it with my initials. I cannot formally *approve* my own PR, since that would leave great opportunity for subjectivity or error. Proper procedure would be to have someone else check and approve your changes. \n\n<center>\n![](tutorial_3_img/pullrequest.gif){width=90%}\n</center>\n\nWhen you go back to `GitHub desktop` and `fetch` the changes on teh remote (that would be GitHub online), you will see that you have now access to the `readme` file and the `development` branch. \n\n#### Registering a `DOI`\nNow that we have a proper and open source package online and the world as our user base, it would be wise to allow for proper referencing of our package.\n\n`GitHub` and `Zenodo` have paired to facilitate this procedure. If you link your `Zenodo` account to `GitHub`, [as outlined here](https://docs.github.com/en/repositories/archiving-a-github-repository/referencing-and-citing-content), you only have to click, copy and paste to fully make your `GitHub` repo citeable. \n\n<center>\n![](tutorial_3_img/doi.gif){width=90%}\n</center>\n\n\n\n#### Add citation\n`Zenodo` prepares the repository citation for us. We can simply grab the info, change our personal information and submit it to `GitHub`. \n\n<center>\n![](tutorial_3_img/citation.gif){width=90%}\n</center>\n\nThe final step before we would put our package *out there* is to notify how users can refer to our package. Run the following code:\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_citation()\n```\n:::\n\nwhich will create the necessary citation files for modification\n\n::: {.cell}\n\n```{.r .cell-code}\n✔ Creating 'inst/'\n✔ Writing 'inst/CITATION'\n• Modify 'inst/CITATION'\n```\n:::\n\n\nWe can now simply grab the text and/or `bibtex` citation from `GitHub` and paste it into the `CITATION` file. The citation info cf. `R`-packages could be:\n\n::: {.cell}\n\n```{.r .cell-code}\ncitHeader(\"To cite roundR in publications use:\")\n\ncitEntry(\n  entry    = \"Manual\",\n  title    = \"gerkovink/roundR: Version 0.2.0 - First release\",\n  author   = \"Gerko Vink and Hanne Oberman\",\n  year     = \"2023\",\n  doi      = \"10.5281/zenodo.7668889\",\n  url      = \"github.com/gerkovink/roundR\",\n  textVersion = paste(\n\"Vink, G and Oberman, H.I. (2023). gerkovink/roundR: Version 0.2.0 - First release (Version v0.2.0) [Computer software]. https://doi.org/10.5281/zenodo.7668889\"\n  )\n)\n```\n:::\n\n\nModify this to your name and paste it into the `CITATION` file.\n\n<center>\n![](tutorial_3_img/use_citation.gif){width=90%}\n</center>\n\n## Installing your own package from GitHub\nGo to `GitHub desktop`, and commit and push the changes to `GitHub`. Then run the following code block:\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::install_github(\"gerkovink/roundR\")\n```\n:::\n\nwhere you replace `\"gerkovink/roundR\"` with your `GitHub` handle and repository name. \n\n<center>\n![](tutorial_3_img/install_github.gif){width=90%}\n</center>\n\n## Advanced topics\n\n::: columns\n::: {.column width=\"30%\"}\n![](tutorial_3_img/hex.png){width=90%}\n:::\n\n::: {.column width=\"70%\"}\n\nPotential next steps include:\n\n- Creating package documentation (e.g. vignettes)\n- Creating a hex logo (e.g. with [`hexmake`](https://connect.thinkr.fr/hexmake/))\n- Creating a package website (e.g. with [`pkgdown`](https://pkgdown.r-lib.org/))\n- Checking the FAIR-ness of your package (e.g. with [`howfairis`](https://pypi.org/project/howfairis/), or [BadgeApp](https://bestpractices.coreinfrastructure.org/en))\n- Checking the code coverage of your package (e.g. with [Codecov](https://about.codecov.io/))\n- Maintaining the package (e.g. with [GitHub issues](https://docs.github.com/en/issues/tracking-your-work-with-issues))\n- Maintaining contributions (e.g. with [a code of conduct](https://docs.github.com/en/communities/setting-up-your-project-for-healthy-contributions/adding-a-code-of-conduct-to-your-project))\n\n:::\n:::\n\n\n\n## Other useful sources\n\n- [The `R Packages` book by Hadley Wickham and Jenny Bryan](https://r-pkgs.org)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}