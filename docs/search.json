[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Schedule\n\n\n\n\n\n\nTimeslot\nActiviteit\n\n\n\n\n09:00 - 09:30\nInloop\n\n\n09:30 - 10:30\nIntroductie markup, scripting en reproduceren\n\n\n10:30 - 10:45\nPauze\n\n\n10:45 - 11:45\nTutorial: Reproduceerbaar programmeren met Quarto  In deze tutorial werken deelnemers in groepsverband aan het maken van een reproduceerbaar archief\n\n\n12:00 - 12:30\nIntroductie tot Git en FAIR development flows\n\n\n12:30 - 13:30\nLunch\n\n\n13:30 - 14:30\nTutorial: git en GitHub  Deelnemers leren samenwerken aan code middels git en GitHub. De basis voor deze tutorial is de groepsopdracht die in de ochtend is gemaakt.\n\n\n14:30 - 14:45\nPauze\n\n\n14:45 - 15:45\nLive workshop R package maken, testen en publiceren  Deelnemers volgen de docent in de workshop waarbij ze hun groepsopdracht individueel publiceren als refereerbeer, vindbaar en werkbaar R-package\n\n\n15:45 - 16:00\nPauze\n\n\n16:00 - 16:30\nAfronden en inleveren individuele opdracht"
  },
  {
    "objectID": "tutorial_1.html",
    "href": "tutorial_1.html",
    "title": "Tutorial 1",
    "section": "",
    "text": "Learning objectives in the tutorials\n\n\n\nThis is a group project. Form groups of 3-4 people. Each group will work together on a mode of collaborative and open development.\n\nTutorial 1: Create a group research compendium\nTutorial 2: Publish the group compendium by means of open development standards and create a reproducible group website\nTutorial 3: Create an individual FAIR R package and commit it to the group page, together with your group projects.\nWe are going to use the Quarto publishing environment to create a reproducible research compendium. This is the first of two Quarto-related tutorials. In this tutorial, we will set up the project structure and fill the documents and create a reproduvible research compendium. The structure of this compendium is based on these workshop materials. In the second tutorial, we will publish the compendium and create a reproducible website with Quarto."
  },
  {
    "objectID": "tutorial_2.html",
    "href": "tutorial_2.html",
    "title": "Tutorial 2",
    "section": "",
    "text": "You can use this repository as the base for Tutorial 2."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Reproducible Programming and Development",
    "section": "",
    "text": "Teaching team: Gerko Vink & Carlos Poses\n\n\nIntroductie\nWelkom bij deze cursusdag, speciaal ontworpen voor aankomende data science professionals die zich willen verdiepen in de praktische ontwikkelvaardigheden die essentieel zijn voor de co-creatie van code en software. In de dynamische wereld van data science is de kunst van samenwerking tussen data analisten, ontwikkelaars en eindgebruikers cruciaal. Deze dag staat daarom in het teken van hands-on leren en samenwerken, met een sterke focus op praktische toepassing.\n\n\nDoel\nHet hoofddoel van deze cursusdag is om jou, als trainee, te voorzien van de vaardigheden en kennis die nodig zijn om effectief bij te dragen aan het ontwikkelingsproces binnen multidisciplinaire teams. Door een combinatie van korte verdiepende sessies en praktische groepsopdrachten, krijg je de kans om direct in teamverband toe te passen wat je leert. Dit alles met het oog op het versterken van jouw vaardigheden in het ontwikkelen, testen, en deployen van code en software, met een speciale focus op FAIR (Findable, Accessible, Interoperable, Reusable) software workflows.\nJe wordt uitgedaagd om je kennis van markup talen, scripting, programmeren, en meer te verdiepen. Door middel van een reeks interactieve tutorials en workshops zul je uiteindelijk leren hoe je een eigen reproduceerbaar R-package kunt ontwikkelen, testen, publiceren en documenteren. Het programma is zorgvuldig samengesteld om je door het volledige ontwikkelingsproces te leiden, van de eerste kennismaking met markup en scripting tot aan de afronding en inlevering van een individuele opdracht.\nAan het einde van deze dag zul je een sterke basis hebben in de belangrijkste ontwikkelflows en -praktijken die van belang zijn voor elke data science ontwikkelaar."
  },
  {
    "objectID": "slides/lec-1.html#disclaimer",
    "href": "slides/lec-1.html#disclaimer",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Disclaimer",
    "text": "Disclaimer\nI owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.\nScientific references are in the footer. Opinions and figures are my own, AI generated or linked to source."
  },
  {
    "objectID": "slides/lec-1.html#rstudio",
    "href": "slides/lec-1.html#rstudio",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "slides/lec-1.html#rstudio---integrated-development-environment-ide-for-r",
    "href": "slides/lec-1.html#rstudio---integrated-development-environment-ide-for-r",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "RStudio - Integrated Development Environment (IDE) for R",
    "text": "RStudio - Integrated Development Environment (IDE) for R\n\nRStudio is a powerful integrated development environment (IDE) designed specifically for the R programming language.\nIt offers a user-friendly interface and a suite of tools to enhance your R coding experience.\n\nKey Features of RStudio\n\n1. Code Editing: RStudio provides a code editor with syntax highlighting, autocompletion, and error checking, making your coding process more efficient.\n2. Console: An interactive R console allows you to execute R code line by line and view results in real time.\n3. Environment Pane: Keep track of your variables, data frames, and functions with the environment pane.\n4. Plots and Visualizations: Create and view plots, charts, and visualizations within RStudio.\n5. Integrated Help: Access R documentation, packages, and online resources directly from the IDE.\n6. Version Control: Easily integrate R projects with version control systems like Git.\n7. Markdown Support: RStudio seamlessly integrates with Markdown, making it an ideal choice for creating reproducible reports and documents.\n\nIt plays a crucial role in promoting reproducibility and collaboration in data science and statistical analysis."
  },
  {
    "objectID": "slides/lec-1.html#rmarkdown-github-flavored-markdown-and-quarto",
    "href": "slides/lec-1.html#rmarkdown-github-flavored-markdown-and-quarto",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "RMarkdown, GitHub-Flavored Markdown, and Quarto",
    "text": "RMarkdown, GitHub-Flavored Markdown, and Quarto\n\nMarkdown is a lightweight markup language for creating formatted text using plain text. It’s easy to learn and widely used in various applications.\nGitHub-Flavored Markdown (GFM) is a variant of Markdown used on GitHub (next week), enhancing its capabilities for documentation and collaboration.\nRMarkdown is an extension of Markdown that allows you to embed R code and its output directly within a document.\n\nPerfect for creating reproducible reports, research papers, and presentations.\n\nQuarto is a comprehensive tool for creating reproducible and collaborative data science documents.\n\nCombines the power of Markdown, \\(\\LaTeX\\), and code execution to streamline document preparation."
  },
  {
    "objectID": "slides/lec-1.html#popular-code-editors-for-r",
    "href": "slides/lec-1.html#popular-code-editors-for-r",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Popular Code Editors (for R)",
    "text": "Popular Code Editors (for R)\n\nRStudio: Ideal for R programming with features tailored for data analysis and visualization.\nVisual Studio Code (VS Code): A versatile code editor with a vast ecosystem of extensions for various languages.\nEclipse (with StatET): Eclipse StatET is an integrated development environment (IDE) for R, offering features for R programming and data analysis.\n\nPopular Notebook Environments\n\nJupyter Notebooks: Widely used interactive kernel-based computing environment for data science and machine learning, supporting multiple (i.e. almost all) programming and scripting languages.\nRMarkdown: An R-based notebook environment that combines code, output, and narrative text in a single document."
  },
  {
    "objectID": "slides/lec-1.html#structure-of-a-quarto-document",
    "href": "slides/lec-1.html#structure-of-a-quarto-document",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Structure of a Quarto Document",
    "text": "Structure of a Quarto Document\n\nA Quarto document is organized into blocks, which serve as the fundamental building blocks of the document’s content.\nEach block can contain a combination of the following elements:\n\nText: Narrative content and explanations.\nCode: R code chunks for computations and data analysis.\nEquations: Mathematical equations and notation.\nFigures: Visualizations, charts, and images.\nTables: Data tables for presenting results.\nYAML Headers: Metadata and document configuration.\nSections and Subsections: Structuring the document into hierarchical sections for organization."
  },
  {
    "objectID": "slides/lec-1.html#quarto-the-yaml-header",
    "href": "slides/lec-1.html#quarto-the-yaml-header",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Quarto: the YAML header",
    "text": "Quarto: the YAML header\nYAML (YAML Ain’t Markup Language) is a human-readable data serialization format commonly used for configuration files and metadata in various programming and markup contexts.\n\nYAML is very simple and readable\nIn Quarto and many other applications, YAML is used to specify:\n\nDocument Metadata: Information about the document itself, such as the title, author, date, and document type.\nDocument Configuration: Settings related to the document’s behavior, appearance, and rendering, such as the output format (e.g., HTML, PDF), document template, and style options.\nCustom Variables: Definitions of custom variables or parameters that can be used throughout the document to control behavior or content.\n\n\nHere’s an example of a simple YAML header in a Quarto document:\n---\ntitle: \"All flavors markdown\"\nauthor: \n  - name: Gerko Vink\n    orcid: 0000-0001-9767-1924\n    email: g.vink@uu.nl\n    affiliations:\n      - name: Methodology & Statistics @ UU University\n  - name: Hanne Oberman\n    orcid: 0000-0003-3276-2141\n    email: h.i.oberman@uu.nl\n    affiliations:\n      - name: Methodology & Statistics @ UU\ndate: 13 Sep 2023\ndate-format: \"D MMM YYYY\"\nbibliography: data/lec-2/publications.bib\nexecute: \n  echo: true\neditor: source\nformat: \n  revealjs:\n    theme: [solarized, gerko.scss]\n    progress: true\n    multiplex: true\n    transition: fade\n    slide-number: true\n    margin: 0.075\n    logo: \"images/logo.png\" \n    toc: false\n    toc-depth: 1\n    toc-title: Outline\n    scrollable: true\n    reference-location: margin\n    footer: Gerko Vink and Hanne Oberman - Markup Languages @ UU\n---\nIn this example:\n\ntitle, author, and date provide metadata about the document.\noutput specifies settings related to the document’s output format and theme.\n\nThe YAML header is a powerful tool for customizing and configuring Quarto documents, allowing you to control how the document is rendered and presented. It ensures that important document information and settings are stored in a human-readable and structured format at the beginning of the document."
  },
  {
    "objectID": "slides/lec-1.html#text-in-quarto",
    "href": "slides/lec-1.html#text-in-quarto",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Text in Quarto",
    "text": "Text in Quarto\nText is text. Nothing more, nothing less\nHeader\nSubheader\nSubsubheader\n# This is a heading indicating a section\n## This is a heading indicating a subsection\n### This is a heading indicating a subsubsection\nBut in the above I used\n### Header\n#### Subheader\n##### Subsubheader"
  },
  {
    "objectID": "slides/lec-1.html#figures",
    "href": "slides/lec-1.html#figures",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Figures",
    "text": "Figures\n\n\n\n\n\nA surfing elephant\n\n\nThe above figure is left-aligned  The caption is also left-aligned\n\n\n\n\nA surfing elephant\n\n\nThe above figure is centered  The caption is still left-aligned\n\n\nThe code for the figures is\n![A surfing elephant](images/lec-2/elephantastic.png){fig-align=\"left\"}\n![A surfing elephant](images/lec-2/elephantastic.png){fig-align=\"center\"}"
  },
  {
    "objectID": "slides/lec-1.html#columns-sizing-equations-and-proper-centering",
    "href": "slides/lec-1.html#columns-sizing-equations-and-proper-centering",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Columns, Sizing, Equations and proper centering",
    "text": "Columns, Sizing, Equations and proper centering\n\n\n\n\n\nA surfing \\(\\epsilon\\lambda\\epsilon\\phi h\\alpha\\nu\\tau\\)\n\n\n\\(e^{i\\pi} + 1 = 0\\)\nThe above figure is left-aligned  The caption is also left-aligned  The equation is left-aligned too\n\n\n\n\n\nA surfing elephant\n\n\n\n\\[e^{i\\pi} + 1 = 0\\]\nThe above figure is centered  The caption is also centered  The equation is centered\n\n\nThe code for the slide is\n## Columns, Sizing, Equations and proper centering\n\n::: columns\n::: {.column width=\"50%\"}\n![A surfing $\\epsilon\\lambda\\epsilon\\phi h\\alpha\\nu\\tau$](images/lec-2/elephantasticer.png){fig-align=\"left\" width=\"80%\"}\n\n$e^{i\\pi} + 1 = 0$\n\nThe above figure is left-aligned &lt;br&gt;\nThe caption is also left-aligned &lt;br&gt;\nThe equation is left-aligned too\n:::\n\n::: {.column width=\"50%\"}\n&lt;center&gt;\n![A surfing elephant](images/lec-2/elephantasticer.png){fig-align=\"center\" width=\"80%\"}\n&lt;/center&gt;\n\n$$e^{i\\pi} + 1 = 0$$\n\nThe above figure is centered &lt;br&gt;\nThe caption is also centered &lt;br&gt;\nThe equation is centered\n:::\n\n:::\n\nThe code for the slide is\n\n``` markdown\n## Columns, Sizing, Equations and proper centering\n\n::: columns\n::: {.column width=\"50%\"}\n![A surfing $\\epsilon\\lambda\\epsilon\\phi h\\alpha\\nu\\tau$](images/lec-2/elephantasticer.png){fig-align=\"left\" width=\"80%\"}\n\n$e^{i\\pi} + 1 = 0$\n\nThe above figure is left-aligned &lt;br&gt;\nThe caption is also left-aligned &lt;br&gt;\nThe equation is left-aligned too\n:::\n\n::: {.column width=\"50%\"}\n&lt;center&gt;\n![A surfing elephant](images/lec-2/elephantasticer.png){fig-align=\"center\" width=\"80%\"}\n&lt;/center&gt;\n\n$$e^{i\\pi} + 1 = 0$$\n\nThe above figure is centered &lt;br&gt;\nThe caption is also centered &lt;br&gt;\nThe equation is centered\n:::\n\n:::"
  },
  {
    "objectID": "slides/lec-1.html#f-ing-it-all-up",
    "href": "slides/lec-1.html#f-ing-it-all-up",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "F-ing it all up",
    "text": "F-ing it all up\n\n\n\n\n\nRick taking a bad\n\n\n\\(e^{i\\pi} + 1 = 0\\)\nThe above figure is left-aligned  The caption is also left-aligned  The equation is left-aligned too\n\n\n\n\n\nRick taking a bad\n\n\n\n\\[e^{i\\pi} + 1 = 0\\]\nThe above figure is centered  The caption is also centered  The equation is centered\n\n\n::: columns\n::: {.column width=\"70%\"}\n![Rick taking a bad](images/lec-2/bathrick.png){fig-align=\"left\" width=\"70%\"}\n\n$e^{i\\pi} + 1 = 0$\n\n:::\n\n::: {.column width=\"30%\"}\n&lt;center&gt;\n![Rick taking a bad](images/lec-2/bathrick.png){fig-align=\"center\" width=\"30%\"}\n&lt;/center&gt;\n\n$$e^{i\\pi} + 1 = 0$$\n:::\n\n:::"
  },
  {
    "objectID": "slides/lec-1.html#math-ing-it-all-up",
    "href": "slides/lec-1.html#math-ing-it-all-up",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Math-ing it all up",
    "text": "Math-ing it all up\n\n\n\n\n\nRick taking a bath\n\n\n\\(e^{i\\pi} + 1 = 0\\)\n\n\n\n\n\nRick taking a bath\n\n\n\n\\[e^{i\\pi} + 1 = 0\\]\n\n\n## Math-ing it all up\n::: columns\n::: {.column width=\"70%\"}\n![Rick taking a bath](images/lec-2/goodrick.png){fig-align=\"left\" width=\"30%\"}\n\n$e^{i\\pi} + 1 = 0$\n:::\n\n::: {.column width=\"30%\"}\n&lt;center&gt;\n![Rick taking a bath](images/lec-2/goodrick.png){fig-align=\"center\" width=\"70%\"}\n&lt;/center&gt;\n\n$$e^{i\\pi} + 1 = 0$$\n:::\n\n:::\n\n```markdown\nEND OF EXAMPLE"
  },
  {
    "objectID": "slides/lec-1.html#r-figures",
    "href": "slides/lec-1.html#r-figures",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "R figures",
    "text": "R figures\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\", ylab = \"Temp (F)\") \n\n\n\n\n\n```{r, fig.width=15, fig.height=4}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\", ylab = \"Temp (F)\") \n```"
  },
  {
    "objectID": "slides/lec-1.html#r-figures-1",
    "href": "slides/lec-1.html#r-figures-1",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "R figures",
    "text": "R figures\n\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\", ylab = \"Temp (F)\") \n\n\n\n\n\n```{r, fig.width=6, fig.height=2.5}\nlibrary(dygraphs)\ndygraph(nhtemp, main = \"New Haven Temperatures\", ylab = \"Temp (F)\") \n```"
  },
  {
    "objectID": "slides/lec-1.html#r-figures-2",
    "href": "slides/lec-1.html#r-figures-2",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "R figures",
    "text": "R figures\n\nlibrary(ggplot2, warn.conflicts = FALSE)\nlibrary(plotly, warn.conflicts = FALSE)\nggplot(mpg, aes(displ, hwy, colour = class)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = lm)"
  },
  {
    "objectID": "slides/lec-1.html#r-figures-3",
    "href": "slides/lec-1.html#r-figures-3",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "R figures",
    "text": "R figures\n\nlibrary(ggplot2, warn.conflicts = FALSE)\nlibrary(plotly, warn.conflicts = FALSE)\np &lt;- ggplot(mpg, aes(displ, hwy, colour = class)) +\n  geom_point() +\n  geom_smooth(se = FALSE, method = lm) \np %&gt;% ggplotly()"
  },
  {
    "objectID": "slides/lec-1.html#equations",
    "href": "slides/lec-1.html#equations",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Equations",
    "text": "Equations\n\n$\\mu$ is used for in-line equations\n$$\\mu$$ is used for equations\n\nLet’s assume that \\(Y\\) follows a normal distribution. \\[Y \\sim  \\mathcal{N}(\\mu, \\sigma^2)\\] Where we set in our simulations \\(\\mu = 10\\) and \\(\\sigma^2 = 5\\). We do something for every \\(Y_i\\)."
  },
  {
    "objectID": "slides/lec-1.html#equations-1",
    "href": "slides/lec-1.html#equations-1",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Equations",
    "text": "Equations\n\n$\\mu$ is used for in-line equations\n$$\\mu$$ is used for equations\n\nLet’s assume that \\(y\\) is a vector with \\(N\\) elements such that \\[y \\sim  \\mathcal{N}(\\mu, \\sigma^2),\\] where we set in our simulations \\(\\mu = 10\\) and \\(\\sigma^2 = 5\\). We do something for every \\(y_i\\) with \\(i = 1, \\dots, N\\)."
  },
  {
    "objectID": "slides/lec-1.html#code-chunks",
    "href": "slides/lec-1.html#code-chunks",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Code chunks",
    "text": "Code chunks\nWe already saw some markdown code chunks. We can run inline code to calculate that 12 * 234 is 2808 by using `r ` and code chunks to evaluate larger blocks of code, such as:\n\nCode\nlibrary(ggplot2)\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c(option = \"E\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Color by number of cylinders\n\n\n\n\n\n\n\n\n\n\n\n(b) Color by engine displacement, in liters\n\n\n\n\n\n\n\nFigure 1: City and highway mileage for 38 popular models of cars."
  },
  {
    "objectID": "slides/lec-1.html#the-previous-slide",
    "href": "slides/lec-1.html#the-previous-slide",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "The previous slide",
    "text": "The previous slide\n## Code chunks and explicit caching\n\n```{r}\n#| output: asis\n\nanswer &lt;- 12 * 234\n``` \n\n\nWe already saw some `markdown` code chunks. We can run inline code to calculate \nthat `12 * 234` is ` r answer ` by using `r  ` and code chunks to evaluate \nlarger blocks of code, such as:\n\n\n\n```{{r}}\n#| output: asis\n#| label: fig-mpg\n#| fig-cap: \"City and highway mileage for 38 popular models of cars.\"\n#| fig-subcap:\n#|   - \"Color by number of cylinders\"\n#|   - \"Color by engine displacement, in liters\"\n#| layout-ncol: 2\n#| column: page\n#| code-fold: true\nlibrary(ggplot2)\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c(option = \"E\") +\n  theme_minimal()\n```"
  },
  {
    "objectID": "slides/lec-1.html#explicit-caching",
    "href": "slides/lec-1.html#explicit-caching",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Explicit Caching",
    "text": "Explicit Caching\n\nExplicit caching is a technique used in RMarkdown and Quarto documents to store and reuse the results of expensive computations or data processing steps.\nIt helps improve the efficiency of document generation and ensures reproducibility by avoiding redundant calculations. \n\nWhy Use Explicit Caching?\n\nEfficiency: Caching saves time and resources by avoiding the repeated execution of time-consuming code chunks.\nReproducibility: Explicit caching ensures that the same results are used when rendering the document, even if the code is modified or re-executed.\nVersion Control: Caching reduces the size of version-controlled documents by storing intermediate results separately."
  },
  {
    "objectID": "slides/lec-1.html#how-does-explicit-caching-work",
    "href": "slides/lec-1.html#how-does-explicit-caching-work",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "How Does Explicit Caching Work?",
    "text": "How Does Explicit Caching Work?\nIn RMarkdown and Quarto, you can use cache directives to specify which code chunks should be cached and which should not.\n\nCached chunks are identified by a unique hash based on their code content, ensuring consistency.\n\nThe following code block\n```{r}\n#| cache: true\n#| code-line-numbers: true\n#| label: imputation\nlibrary(mice)\nlibrary(magrittr)\nlibrary(purrr)\nimp &lt;- nhanes %&gt;% mice(print = FALSE)\nimp |&gt;\n  complete(\"all\") %&gt;% \n  map(~.x %$% lm(bmi ~ chl + hyp)) |&gt;\n  pool()\n```\nwould result in this output\n\nlibrary(mice)\nlibrary(magrittr)\nlibrary(purrr)\nimp &lt;- nhanes %&gt;% mice(print = FALSE)\nimp |&gt;\n  complete(\"all\") %&gt;% \n  map(~.x %$% lm(bmi ~ chl + hyp)) |&gt;\n  pool()\n\nClass: mipo    m = 5 \n         term m    estimate         ubar            b            t dfcom\n1 (Intercept) 5 21.11140301 1.508593e+01 2.8737763894 1.853446e+01    22\n2         chl 5  0.03325061 4.165502e-04 0.0000811387 5.139166e-04    22\n3         hyp 5 -0.97629112 4.517101e+00 1.0597984680 5.788859e+00    22\n        df       riv    lambda       fmi\n1 14.41839 0.2285926 0.1860606 0.2795180\n2 14.30011 0.2337448 0.1894596 0.2831631\n3 13.26553 0.2815430 0.2196907 0.3156370\n\n\nwith corresponding cache structure relative to the root and format of the output file:"
  },
  {
    "objectID": "slides/lec-1.html#tables",
    "href": "slides/lec-1.html#tables",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Tables",
    "text": "Tables\nUse https://www.tablesgenerator.com/markdown_tables if you need to make a table from scratch.\nOtherwise, use tibbles:\n\nmice::boys |&gt; \n  tibble::as_tibble()\n\n# A tibble: 748 × 9\n     age   hgt   wgt   bmi    hc gen   phb      tv reg  \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;int&gt; &lt;fct&gt;\n 1 0.035  50.1  3.65  14.5  33.7 &lt;NA&gt;  &lt;NA&gt;     NA south\n 2 0.038  53.5  3.37  11.8  35   &lt;NA&gt;  &lt;NA&gt;     NA south\n 3 0.057  50    3.14  12.6  35.2 &lt;NA&gt;  &lt;NA&gt;     NA south\n 4 0.06   54.5  4.27  14.4  36.7 &lt;NA&gt;  &lt;NA&gt;     NA south\n 5 0.062  57.5  5.03  15.2  37.3 &lt;NA&gt;  &lt;NA&gt;     NA south\n 6 0.068  55.5  4.66  15.1  37   &lt;NA&gt;  &lt;NA&gt;     NA south\n 7 0.068  52.5  3.81  13.8  34.9 &lt;NA&gt;  &lt;NA&gt;     NA south\n 8 0.071  53    3.89  13.8  35.8 &lt;NA&gt;  &lt;NA&gt;     NA west \n 9 0.071  55.1  3.88  12.8  36.8 &lt;NA&gt;  &lt;NA&gt;     NA west \n10 0.073  54.5  4.2   14.1  38   &lt;NA&gt;  &lt;NA&gt;     NA east \n# ℹ 738 more rows\n\n\nor use e.g. library(DT) for customization:\n\nlibrary(DT)\nmtcars %&gt;% \n  datatable(options = list(pageLength = 25))"
  },
  {
    "objectID": "slides/lec-1.html#reprex-and-renv",
    "href": "slides/lec-1.html#reprex-and-renv",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "reprex and renv",
    "text": "reprex and renv\nlibrary(renv)\n#&gt; \n#&gt; Attaching package: 'renv'\n#&gt; The following objects are masked from 'package:stats':\n#&gt; \n#&gt;     embed, update\n#&gt; The following objects are masked from 'package:utils':\n#&gt; \n#&gt;     history, upgrade\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     autoload, load, remove\nrenv::init()\n#&gt; - Linking packages into the project library ... Done!\n#&gt; The following package(s) will be updated in the lockfile:\n#&gt; \n#&gt; # CRAN -----------------------------------------------------------------------\n#&gt; - backports       [* -&gt; 1.4.1]\n#&gt; - base64enc       [* -&gt; 0.1-3]\n#&gt; - broom           [* -&gt; 1.0.4]\n#&gt; - bslib           [* -&gt; 0.4.2]\n#&gt; - cachem          [* -&gt; 1.0.8]\n#&gt; - cli             [* -&gt; 3.6.1]\n#&gt; - cpp11           [* -&gt; 0.4.3]\n#&gt; - digest          [* -&gt; 0.6.31]\n#&gt; - dplyr           [* -&gt; 1.1.2]\n#&gt; - ellipsis        [* -&gt; 0.3.2]\n#&gt; - evaluate        [* -&gt; 0.21]\n#&gt; - fansi           [* -&gt; 1.0.4]\n#&gt; - fastmap         [* -&gt; 1.1.1]\n#&gt; - fontawesome     [* -&gt; 0.5.1]\n#&gt; - fs              [* -&gt; 1.6.2]\n#&gt; - generics        [* -&gt; 0.1.3]\n#&gt; - glue            [* -&gt; 1.6.2]\n#&gt; - highr           [* -&gt; 0.10]\n#&gt; - htmltools       [* -&gt; 0.5.5]\n#&gt; - jquerylib       [* -&gt; 0.1.4]\n#&gt; - jsonlite        [* -&gt; 1.8.4]\n#&gt; - knitr           [* -&gt; 1.43]\n#&gt; - lattice         [* -&gt; 0.21-8]\n#&gt; - lifecycle       [* -&gt; 1.0.3]\n#&gt; - magrittr        [* -&gt; 2.0.3]\n#&gt; - memoise         [* -&gt; 2.0.1]\n#&gt; - mime            [* -&gt; 0.12]\n#&gt; - pillar          [* -&gt; 1.9.0]\n#&gt; - pkgconfig       [* -&gt; 2.0.3]\n#&gt; - purrr           [* -&gt; 1.0.1]\n#&gt; - R6              [* -&gt; 2.5.1]\n#&gt; - rappdirs        [* -&gt; 0.3.3]\n#&gt; - Rcpp            [* -&gt; 1.0.11]\n#&gt; - RcppArmadillo   [* -&gt; 0.12.4.0.0]\n#&gt; - renv            [* -&gt; 1.0.2]\n#&gt; - rlang           [* -&gt; 1.1.1]\n#&gt; - rmarkdown       [* -&gt; 2.22]\n#&gt; - sass            [* -&gt; 0.4.6]\n#&gt; - stringi         [* -&gt; 1.7.12]\n#&gt; - stringr         [* -&gt; 1.5.0]\n#&gt; - tibble          [* -&gt; 3.2.1]\n#&gt; - tidyr           [* -&gt; 1.3.0]\n#&gt; - tidyselect      [* -&gt; 1.2.0]\n#&gt; - tinytex         [* -&gt; 0.45]\n#&gt; - utf8            [* -&gt; 1.2.3]\n#&gt; - vctrs           [* -&gt; 0.6.2]\n#&gt; - withr           [* -&gt; 2.5.0]\n#&gt; - xfun            [* -&gt; 0.39]\n#&gt; - yaml            [* -&gt; 2.3.7]\n#&gt; \n#&gt; # GitHub ---------------------------------------------------------------------\n#&gt; - mice            [* -&gt; gerkovink/mice@match_conditional]\n#&gt; \n#&gt; The version of R recorded in the lockfile will be updated:\n#&gt; - R               [* -&gt; 4.3.0]\n#&gt; \n#&gt; - Lockfile written to \"/private/var/folders/yx/6rn4qpl13wsgk4c7s3jc9d1r0000gp/T/RtmpMqetyA/reprex-1233f6d959b19-drear-kitty/renv.lock\".\nlibrary(mice)\n#&gt; \n#&gt; Attaching package: 'mice'\n#&gt; The following object is masked from 'package:stats':\n#&gt; \n#&gt;     filter\n#&gt; The following objects are masked from 'package:base':\n#&gt; \n#&gt;     cbind, rbind\nlibrary(magrittr)\nlibrary(purrr)\n#&gt; \n#&gt; Attaching package: 'purrr'\n#&gt; The following object is masked from 'package:magrittr':\n#&gt; \n#&gt;     set_names\n#&gt; The following object is masked from 'package:renv':\n#&gt; \n#&gt;     modify\nrenv::snapshot()\n#&gt; - The lockfile is already up to date.\nrenv::remove(\"mice\")\n#&gt; - Removing package(s) from project library ...\n#&gt; Removing package 'mice' ... Done!\nrenv::restore()\n#&gt; The following package(s) will be updated:\n#&gt; \n#&gt; # GitHub ---------------------------------------------------------------------\n#&gt; - mice   [* -&gt; gerkovink/mice@match_conditional]\n#&gt; \n#&gt; # Installing packages --------------------------------------------------------\n#&gt; - Installing mice ...                           OK [linked from cache]\nimp &lt;- nhanes %&gt;% mice(print = FALSE)\nimp |&gt;\n  complete(\"all\") %&gt;% \n  map(~.x %$% lm(bmi ~ chl + hyp)) |&gt;\n  pool()\n#&gt; Class: mipo    m = 5 \n#&gt;          term m   estimate         ubar            b            t dfcom\n#&gt; 1 (Intercept) 5 20.6687887 2.020809e+01 8.8963873222 3.088375e+01    22\n#&gt; 2         chl 5  0.0354435 5.409979e-04 0.0001081414 6.707676e-04    22\n#&gt; 3         hyp 5 -0.8447582 4.353337e+00 0.9275040571 5.466342e+00    22\n#&gt;          df       riv    lambda       fmi\n#&gt; 1  9.489411 0.5282868 0.3456725 0.4504537\n#&gt; 2 14.161181 0.2398710 0.1934645 0.2874598\n#&gt; 3 13.811544 0.2556671 0.2036105 0.2983537\n\nsessionInfo()\n#&gt; R version 4.3.0 (2023-04-21)\n#&gt; Platform: aarch64-apple-darwin20 (64-bit)\n#&gt; Running under: macOS Ventura 13.6\n#&gt; \n#&gt; Matrix products: default\n#&gt; BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \n#&gt; LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n#&gt; \n#&gt; locale:\n#&gt; [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#&gt; \n#&gt; time zone: Europe/Amsterdam\n#&gt; tzcode source: internal\n#&gt; \n#&gt; attached base packages:\n#&gt; [1] stats     graphics  grDevices utils     datasets  methods   base     \n#&gt; \n#&gt; other attached packages:\n#&gt; [1] purrr_1.0.1    magrittr_2.0.3 mice_3.15.3    renv_1.0.2    \n#&gt; \n#&gt; loaded via a namespace (and not attached):\n#&gt;  [1] vctrs_0.6.2      cli_3.6.1        knitr_1.43       rlang_1.1.1     \n#&gt;  [5] xfun_0.39        generics_0.1.3   glue_1.6.2       backports_1.4.1 \n#&gt;  [9] htmltools_0.5.5  fansi_1.0.4      rmarkdown_2.22   grid_4.3.0      \n#&gt; [13] evaluate_0.21    tibble_3.2.1     fastmap_1.1.1    yaml_2.3.7      \n#&gt; [17] lifecycle_1.0.3  compiler_4.3.0   dplyr_1.1.2      fs_1.6.2        \n#&gt; [21] pkgconfig_2.0.3  Rcpp_1.0.11      tidyr_1.3.0      rstudioapi_0.14 \n#&gt; [25] lattice_0.21-8   digest_0.6.31    R6_2.5.1         tidyselect_1.2.0\n#&gt; [29] reprex_2.0.2     utf8_1.2.3       pillar_1.9.0     tools_4.3.0     \n#&gt; [33] withr_2.5.0      broom_1.0.4\nCreated on 2023-09-27 with reprex v2.0.2"
  },
  {
    "objectID": "slides/lec-1.html#benefits-of-using-renv",
    "href": "slides/lec-1.html#benefits-of-using-renv",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Benefits of Using renv",
    "text": "Benefits of Using renv\n\n1. Dependency Isolation: renv creates a dedicated environment for each project, preventing conflicts between package versions.\n2. Reproducibility: With renv, you can capture and record the specific package versions used in your project, ensuring reproducibility over time.\n3. Collaboration: Share your project with others, and they can easily recreate the same environment using renv.lock.\n4. Easier Package Installation: renv simplifies package installation. Just run renv::restore() to set up the project environment.\n5. Automatic Snapshot: renv automatically generates a renv.lock file, listing all package versions used, making it easy to recreate the environment.\n6. Compatibility: renv is compatible with popular version control systems like Git, facilitating collaboration and sharing.\n\nUse renv::snapshot() to update the renv.lock file when you add or update packages. You can use renv::activate() and renv::deactivate() to activate or deactivate renv for your project."
  },
  {
    "objectID": "slides/lec-1.html#diagrams",
    "href": "slides/lec-1.html#diagrams",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Diagrams",
    "text": "Diagrams\n```{{mermaid}}\n%%| echo: false\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C &lt;--&gt; D[Result one]\n  C --&gt; E[Result two]\n```\n\n\n\n\n\n\nflowchart LR\n  A[Hard edge] --&gt; B(Round edge)\n  B --&gt; C{Decision}\n  C &lt;--&gt; D[Result one]\n  C --&gt; E[Result two]\n\n\n\n\n\n\nSee Quarto Diagrams for a more comprehensive overview of all graphing engines. This Live online Mermaid editor is awesome!"
  },
  {
    "objectID": "slides/lec-1.html#scientific-publishing-with-rticles-and-quarto",
    "href": "slides/lec-1.html#scientific-publishing-with-rticles-and-quarto",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Scientific publishing with rticles and Quarto",
    "text": "Scientific publishing with rticles and Quarto\nTo use rticles from RStudio, you can access the templates through File -&gt; New File -&gt; R Markdown. This will open the dialog box where you can select from one of the available templates:\n\nQuarto\nThe quarto use template command can be used to create an article from one the below formats.\n\n\nTerminal\n\nquarto use template quarto-journals/acm\nquarto use template quarto-journals/plos\nquarto use template quarto-journals/elsevier\nquarto use template quarto-journals/acs\nquarto use template quarto-journals/jss"
  },
  {
    "objectID": "slides/lec-1.html#citations",
    "href": "slides/lec-1.html#citations",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Citations",
    "text": "Citations\nOberman and Vink (2023) and Cai, Van Buuren and Vink (2023) are some of our team’s most recent publications. Some references - such as some work by Reinder Banning and Gerko Vink are much older (2010) or contain simple and contemporary solutions by Volker and Vink (2022, 2–4) or cool but potentially confusing images (Schouten and Vink 2021, 1255).\n\nBut you can also refer to Oberman and Vink (2023) here\n\n\n\nBanning, Reinder, and Gerko Vink. 2010. “Methoden En Indicatoren Voor Het Evalueren En Beschrijven van Controle- En Correctieprocessen.” CBS nota DMV-2010- 06-08-RBNG-GVNK. Centraal Bureau voor de Statistiek.\n\n\nCai, Mingyang, Stef van Buuren, and Gerko Vink. 2023. “Graphical and Numerical Diagnostic Tools to Assess Multiple Imputation Models by Posterior Predictive Checking.” Heliyon.\n\n\nOberman, Hanne I., and Gerko Vink. 2023. “Toward a Standardized Evaluation of Imputation Methodology.” Biometrical Journal, 2200107. https://doi.org/https://doi.org/10.1002/bimj.202200107.\n\n\nSchouten, Rianne Margaretha, and Gerko Vink. 2021. “The Dance of the Mechanisms: How Observed Information Influences the Validity of Missingness Assumptions.” Sociological Methods & Research 50 (3): 1243–58.\n\n\nVolker, Thom, and Gerko Vink. 2022. “Synthetic Data in r: Generating Synthetic Data with High Utility Using Mice.” Https://Www.gerkovink.com/miceVignettes/Synthetic/Synthetic.html.\n\n\n\n## Citations\n\n@eval and Cai, Van Buuren and Vink [-@cai2023graphical] are some of our team's most recent publications. Some references - such as some work by Reinder Banning and Gerko Vink are much older [-@banningvink] or contain simple and contemporary solutions by @vigntg [p. 2-4] or cool but potentially confusing images [@schouten2021dance, 1255].\n\n::: footer\nBut you can also refer to @eval here\n:::\n\n::: {#refs}\n:::\n\n\n\n\nGerko Vink and Hanne Oberman - Methods & Statistics @ UU"
  },
  {
    "objectID": "tutorial_3.html",
    "href": "tutorial_3.html",
    "title": "Tutorial 3",
    "section": "",
    "text": "Recording of the flow\n\n\n\nIf you’d like to revisit this tutorial later on, there exists a recording of the discussion of the outlined flow here (download for the 1h+ recording)"
  },
  {
    "objectID": "tutorial_3.html#some-r-code",
    "href": "tutorial_3.html#some-r-code",
    "title": "Tutorial 3",
    "section": "Some R-code",
    "text": "Some R-code\nIn order to demonstrate the creation of an R-package, we will identify some odd behaviour by R:\n\nlibrary(dplyr)\nc(0.5, 1.5, 2.5, 3.5) %&gt;% round()\n\n[1] 0 2 2 4\n\n\nWe can see that R rounds - by default - the number 1.5 to integer 2 and the number 2.5 also to integer 2. The reason for this behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the even digit.\nIf we’d like to round up to the next integer, we can easily define the following function:\n\nrounder &lt;- function(x){\n  diff &lt;- x - floor(x)\n  out &lt;- x %&gt;% ceiling()\n  out[diff &lt; .5] &lt;- floor(x)[diff &lt; .5]\n  return(out)\n}\n\nwhere the vector c(0.5, 1.5, 2.5, 3.5) is rounded up to the next integer\n\nc(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n\n[1] 1 2 3 4\n\n\nand where the vector c(0.49, 1.49, 2.49, 3.49) is rounded down to the previous integer\n\nc(0.49, 1.49, 2.49, 3.49) %&gt;% rounder()\n\n[1] 0 1 2 3"
  },
  {
    "objectID": "tutorial_3.html#create-r-package-roundr",
    "href": "tutorial_3.html#create-r-package-roundr",
    "title": "Tutorial 3",
    "section": "Create R-package roundR",
    "text": "Create R-package roundR\nThe goal of this document is to create the code for the rounder() function into a stand-alone R-package with its referenceable Digital Object Identifier\n\nSteps in creating an R-package\n\nPackages and sources needed\nWe need the following packages to help us with building, testing and maintaining our package:\n\nlibrary(devtools) # development tools\nlibrary(usethis)  # automated package and project setup\nlibrary(testthat) # unit testing\n\n\n\nPreparing the package structure\nWe need a location for our R-package. The simplest approach to creating the skeleton for an R-package is to use RStudio. The following gif outlines this procedure:\n\n\n\nWe have now created the necessary structure for an R-package. We can see this structure and the generated package files in the File Pane in RStudio.\n\n\n\nThe R subfolder contains all the R-code for your package and the man folder contains all the corresponding R manuals. By default, for a new R-package generated by RStudio the file hello.R is generated.\n\n\n\nAs a matter of fact, the skeleton R-package is already a fully functional R-package. Try installing the package in the build pane.\n\n\n\n\n\nAdd the description\nOpen the file DESCRIPTION from the file pane. The following window opens:\n\n\n\n\nNow, replace the contents of the DESCRIPTION file with\n\nPackage: roundR\nType: Package\nTitle: Round Numeric Values to the Nearest Integer\nVersion: 0.1.0\nAuthor: Gerko Vink and Hanne Oberman\nMaintainer: Gerko Vink &lt;G.Vink@uu.nl&gt;\nDescription: In R the default choice for rounding follows the IEC 60559 standard where a 5 is expected to be rounded to the even digit. This package offers alternative functionality to round to the closest integer. \nLicense: No LiCeNsE YeT\nEncoding: UTF-8\nLazyData: true\n\nThe DESCRIPTION file governs the information about the licence, authors, contributors, maintainers, etcetera. The argument lazyData: true indicates that data sets should be lazily loaded. This means that data will not occupy any memory unless it is needed. This is a good argument to have as default.\nWe also need to set a license. Running the following code from package usethis will write a permissive MIT license to the description file\n\nusethis::use_mit_license()\n\nDon’t forget to save the updated DESCRIPTION file and change our names to your name.\n\n\nAdd the functional code\nNow it is time to extend the package with the functionality we promised in our updated DESCRIPTION. To do so, we start a new file names rounder.R by either manually creating it in the R sub folder, or by running the following code evaluation\n\nusethis::use_r(\"rounder\")\n\nThe use_r() function from the usethis package is very convenient, because it creates the necessary file in the correct location and opens the file in the editor pane.\n\n\n\n\nNow that we have created the file for our functional code, we can start building the code file. The most flexible approach to creating and maintaining a package is to use roxygen2. The roxygen2 package is a convenient in-line documentation convention that generates your Rd documentation, NAMESPACE file, and much more for you. Remember that man folder in our package root? That contains all documentation files. However, you can imagine if we have two seperate locations for our R-code and our Rd help files, that at some point the code and documentation might get out of sync. For example, if we update the code, but forget to reflect changes in our manual, the usability of our package may be at stake and documentation to end-users might get confusing. Most of all, it would be a lot of work for us to maintain multiple linked files in multiple locations. roxygen2 solves this for us by extracting the documentation from our R-code file. The only thing we need to do is maintain a single file.\nTo start with roxygen2 in our package, we need to instruct the package to use roxygen2 from now on:\n\nusethis::use_roxygen_md()\n\nThe above call will add the following lines to our DESCRIPTION file:\n\nRoxygen: list(markdown = TRUE)\nRoxygenNote: 7.2.3\n\nWe mentioned before that the roxygen2 engine expects the function documentation in the same file as the function code. A good starting point for that documentation is the following block:\n\n#' A short description of your function\n#' \n#' @param x The first argument to be governed by the letter x.\n#' @param y The second argument to denoted by the letter y.\n#' @returns a short description of the expected return.\n#' @examples\n#' examplecode 1\n#' examplecode 2\n\nIn R, when you have executed usethis::use_r() and have filled in your R code, you can run Code &gt; Insert Roxygen Skeleton to automatically create the relevant roxygen documentation. For our function rounder() - with some customization and examples, this could result in the following rounder.R code file\n\n#' Round to the nearest integer\n#'\n#'Function \\code{\\link{base::round}} rounds - by default -  the number `1.5` to\n#'integer `2` and the number `2.5` also to integer `2`. The reason for this\n#'behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the\n#'even digit. This function provides an integer rounding alternative to\n#'\\code{\\link{base::round}}.\n#'\n#' @param x A numeric element or vector to round to the nearest integer\n#' @returns An integer element or vector\n#' @author Gerko Vink \\email{g.vink@uu.nl} and Hanne Oberman \\email{h.i.oberman@uu.nl}\n#' @examples\n#' # rounds weirdly\n#' c(0.5, 1.5, 2.5, 3.5) %&gt;% round()\n#' # rounds correctly\n#' c(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n#'\nrounder &lt;- function(x) {\n  diff &lt;- x - floor(x)\n  out &lt;- x %&gt;% ceiling()\n  out[diff &lt; .5] &lt;- floor(x)[diff &lt; .5]\n  return(out)\n}\n\nYou can copy the above code chunk to your rounder.R file. A good source to find inspiration for writing roxygen2 documentation is the roxygen2 reference page.\nNow that we have a working rounder.R file with documentation included, we can build the documentation. A good wrapper function to build all documentation in your package is the following code evaluation:\n\ndevtools::document()\n\n\n\n\n\nThe document() function from the devtools package will build all documentation for all files that use roxygen2 and it will build the NAMESPACE of your package accordingly. If you encounter the following message:\n\nSkipping NAMESPACE\n✖ It already exists and was not generated by roxygen2. \n\njust remove the NAMESPACE file and re-run the document() function.\nWe can now remove the R/hello.R and man/hello.Rd files as they are not supposed to be part of our package\n\n\nBuilding and checking\nLet’s check the functionality of our package.\n\n\n\n\nWe can see under build &gt; check that our current package yields 1 error, 1 warning and 1 note.\n\nError\n\n❯ checking examples ... ERROR\n  Running examples in ‘roundR-Ex.R’ failed\n  The error most likely occurred in:\n\n    ...\n  \n  &gt; c(0.5, 1.5, 2.5, 3.5) %&gt;% round()\n  Error in c(0.5, 1.5, 2.5, 3.5) %&gt;% round() : \n    could not find function \"%&gt;%\"\n  Execution halted\n\nThe error stems from the examples in our documentation. The examples use the binary function %&gt;% from package magrittr, but we did not load that package in the example. Remember that these examples are self-contained and that any dependent packages need to be explicitly loaded via library() for the code to run. Just like any other R instance. Simply adding library(magrittr) to the example code will solve the issue.\nAdd library(magrittr) to the example code:\n\n#' @examples\n#' library(magrittr)\n#' # rounds weirdly\n#' c(0.5, 1.5, 2.5, 3.5) %&gt;% round()\n#' # rounds correctly\n#' c(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n\n\n\nWarning\n\n❯ checking Rd cross-references ... WARNING\n  Missing link or links in documentation object 'rounder.Rd':\n    ‘base::round’\n  \n  See section 'Cross-references' in the 'Writing R Extensions' manual.\n\nThe error stems from the crossreference we attempted in our documentation. The proper way to refer to function round() from package base is not with \\link{base::round}, but with \\link[base]{round} following the structure \\link[package]{function}. We could have opted for not referencing, or linking the round() function at all, but this would not align with open and inclusive development conventions.\nCorrect the faulty crossreferences in the documentation:\n\n#'Function \\code{\\link[base]{round}} rounds - by default -  the number `1.5` to\n#'integer `2` and the number `2.5` also to integer `2`. The reason for this\n#'behaviour is the IEC 60559 standard where a 5 is expected to be rounded to the\n#'even digit. This function provides an integer rounding alternative to\n#'\\code{\\link[base]{round}}.\n\n\n\nNote\n\n❯ checking R code for possible problems ... NOTE\n  rounder: no visible global function definition for ‘%&gt;%’\n  Undefined global functions or variables:\n    %&gt;%\n\nWe use function %&gt;% from package magrittr, but we neglected to make explicit that this function should have been imported from package magrittr. In other words, R needs to know that our package roundR would depend on package magrittr for its functionality to work.\nWe can fix this by runnin the following usethis evaluation in the console:\n\nusethis::use_import_from(\"magrittr\", \"%&gt;%\")\n\nWhen asked\n\n`use_import_from()` requires package-level documentation.\nWould you like to add it now?\n\n1: For sure\n2: Not now\n3: No way\n\nchoose the fun option that would add it (i.e. For Sure, Yes, Absolutely, etc). These options change every time you re-run the function code, so read it carefully!\nOnce you have selected the correct option, we can re-run the CHECK. You will find that there still persists an error in the example:\n\n❯ checking examples ... ERROR\n  Running examples in ‘roundR-Ex.R’ failed\n  The error most likely occurred in:\n  \n  ...\n  \n  &gt; c(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n  Error in rounder(.) : could not find function \"rounder\"\n  Calls: %&gt;%\n  Execution halted\n\nOur package CHECK cannot find function rounder(). That may seem weird, since it is the only function in our package. The thing is - we have not explicitly told roxygen2 to export our function, i.e. to make our function available outside of the package namespace. Simply adding @export to the rounder.R file would solve this error:\n\n...\n#' @author Gerko Vink \\email{g.vink@uu.nl} and Hanne Oberman \\email{h.i.oberman@uu.nl}\n#' @export\n#' @examples\n#' library(magrittr)\n...\n\nTry re-running the CHECK to see if you hit three green check marks (NO errors, warnings and notes). If all is well, you’ll see:\n\n── R CMD check results ────────────────────────────────────────── roundR 0.1.0 ────\nDuration: 6.6s\n\n0 errors ✔ | 0 warnings ✔ | 0 notes ✔\n\nR CMD check succeeded\n\n\n\n\nIncreasing the version\nNow that we have a working package with a succesfull R CMD check, we might think about updating the version of the package. After all, a lot has changed since the last version got defined at the start of our development journey.\nThe easiest means to increasing the version to 0.2.0 (indicating a minor update) is to use\n\nusethis::use_version()\n\nYou will be presented with something like:\n\n✔ Setting active project to '/Users/gerko/surfdrive/Werk/GitHub/roundR/roundR'\nCurrent version is 0.1.1.\nWhat should the new version be? (0 to exit) \n\n1: major --&gt; 1.0.0\n2: minor --&gt; 0.2.0\n3: patch --&gt; 0.1.2\n4:   dev --&gt; 0.1.1.9000\n\nSelection: 2\n✔ Setting Version field in DESCRIPTION to '0.2.0'\nThere is 1 uncommitted file:\n* 'DESCRIPTION'\nIs it ok to commit it?\n\n1: For sure\n2: Negative\n3: Nope\n\nSelection: 1\n✔ Adding files\n✔ Making a commit with message 'Increment version number to 0.2.0'\n\nThe question Is it ok to commit it? is related to Git. Please click to commit the version increase. For reasons of brevity and simplicity, we will leave a thorough discussion of incremental Git commits for now and demonstrate to use of Git and GitHub at the end of this walkthrough.\n\n\nAdd tests\nThe next step for a mature package is to include tests. Every function should have functional tests. The testthat package is geared to that. Make sure that you have the rounder.R file open in the Source pane and run:\n\nusethis::use_test()\n\nThe proper structure for test files has now been created:\n\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n✔ Writing 'tests/testthat/test-rounder.R'\n• Modify 'tests/testthat/test-rounder.R'\n\nYou are asked to modify the tests/testthat/test-rounder.R file. Replace the example test with:\n\ntest_that(\"rounder works\", {\n  A &lt;- c(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n  B &lt;- c(0.49, 1.49, 2.49, 3.49) %&gt;% rounder()\n  expect_equal(A, c(1, 2, 3, 4))\n  expect_equal(B, c(0, 1, 2, 3))\n})\n\ntest_that(\"rounder yields different results than round\", {\n  vec1 &lt;- c(0.5, 1.5, 2.5, 3.5)\n  vec2 &lt;- c(0.499999999999999999995,\n            1.499999999999999999995,\n            2.499999999999999999995,\n            3.499999999999999999995)\n  A &lt;- vec1 %&gt;% rounder()\n  B &lt;- vec1 %&gt;% round()\n  C &lt;- vec2 %&gt;% rounder()\n  D &lt;- vec2 %&gt;% round()\n  expect_false(identical(A, B))\n  expect_false(identical(C, D))\n})\n\nClick the Test button in the build pane:\n\n\n\nAll test should pass, meaning that your rounder() function yields correct results (test 1) that differ fundamentally from the results obtained with round() (test 2).\nIf test would fail, you’d be notified. For example\n\ntest_that(\"rounder works\", {\n  A &lt;- c(0.5, 1.5, 2.5, 3.5) %&gt;% rounder()\n  expect_equal(A, c(4, 3, 2, 1))\n  })\n\n── Failure: rounder works ──────────────────────────────────────────────────────\n`A` not equal to c(4, 3, 2, 1).\n4/4 mismatches (average diff: 2)\n[1] 1 - 4 == -3\n[2] 2 - 3 == -1\n[3] 3 - 2 ==  1\n[4] 4 - 1 ==  3\n\n\nError:\n! Test failed\n\n\nFortunately, our test all passed. Now rerun the R CMD check. If all is well you’ll receive confirmation of a successful check.\n\n\nPublishing to GitHub\nThis section assumes that you are logged into your GitHub account. If you have trouble realizing this, GitHub has a great step-by-step walkthrough.\nLet’s publish our R-package to GitHub. To do so, we need to perform two steps. First, we must log (commit) our changes to the Git distributed version control system. This stores the file changes to our own machine. Next we must link our local Git to a remote online repository on GitHub. Luckily, with GitHub Desktop, we can perform all these steps in a single window interface.\nLet’s start by adding our R-package to GitHub desktop. Remember that we already started the package in RStudio as a Git repository, so we only have to point GitHub desktop to the correct directory.\n\n\n\nNext, we commit the changes. This means that we save the state of files for a moment in time, so that we can always revert to that state and see how the files changed with respect to the previous state.\n\n\n\nNaturally, you would not only do this at the start (when RStudio created the Git repository) and end (when we have a working package), but at regular and informative intervals. For example, when you add a function, a test, a help file, a license, etcetera.\nNow that we have commited our package, we can publish it on GitHub.\n\n\n\nTry your online GitHub repositories at https://github.com. You will see your package there and that the license is automatically recognized. You will also see that you are in the main branch. By default, that will be the live version of your package. Now that your package is live, it would be nice to add a Readme file that informs visitors to your repository. But we will extend our workflow with a good behaviour: not working in the main branch. We would not want to accidentally overwrite or break the functionality of our package, just because we were working in the same branch. So let’s add a Readme to a new development branch.\n\n\n\nWhen we commit the new Readme file to the development branch, a new window opens to propose the pull request (PR). The PR is nothing more than a request to the package developers to pull your proposed changes into (usually) the main branch of the software. Since we are the developers, we have to both create and accept the PR.\n\n\n\nIt is good procedure to write an informative PR message, usually outlining the nature and rationale of the changes. I also demonstrate how to accept a PR, thereby approving the changes per file (only one now) and signing it with my initials. I cannot formally approve my own PR, since that would leave great opportunity for subjectivity or error. Proper procedure would be to have someone else check and approve your changes.\n\n\n\nWhen you go back to GitHub desktop and fetch the changes on teh remote (that would be GitHub online), you will see that you have now access to the readme file and the development branch.\n\n\nRegistering a DOI\nNow that we have a proper and open source package online and the world as our user base, it would be wise to allow for proper referencing of our package.\nGitHub and Zenodo have paired to facilitate this procedure. If you link your Zenodo account to GitHub, as outlined here, you only have to click, copy and paste to fully make your GitHub repo citeable.\n\n\n\n\n\nAdd citation\nZenodo prepares the repository citation for us. We can simply grab the info, change our personal information and submit it to GitHub.\n\n\n\nThe final step before we would put our package out there is to notify how users can refer to our package. Run the following code:\n\nusethis::use_citation()\n\nwhich will create the necessary citation files for modification\n\n✔ Creating 'inst/'\n✔ Writing 'inst/CITATION'\n• Modify 'inst/CITATION'\n\nWe can now simply grab the text and/or bibtex citation from GitHub and paste it into the CITATION file. The citation info cf. R-packages could be:\n\ncitHeader(\"To cite roundR in publications use:\")\n\ncitEntry(\n  entry    = \"Manual\",\n  title    = \"gerkovink/roundR: Version 0.2.0 - First release\",\n  author   = \"Gerko Vink and Hanne Oberman\",\n  year     = \"2023\",\n  doi      = \"10.5281/zenodo.7668889\",\n  url      = \"github.com/gerkovink/roundR\",\n  textVersion = paste(\n\"Vink, G and Oberman, H.I. (2023). gerkovink/roundR: Version 0.2.0 - First release (Version v0.2.0) [Computer software]. https://doi.org/10.5281/zenodo.7668889\"\n  )\n)\n\nModify this to your name and paste it into the CITATION file."
  },
  {
    "objectID": "tutorial_3.html#installing-your-own-package-from-github",
    "href": "tutorial_3.html#installing-your-own-package-from-github",
    "title": "Tutorial 3",
    "section": "Installing your own package from GitHub",
    "text": "Installing your own package from GitHub\nGo to GitHub desktop, and commit and push the changes to GitHub. Then run the following code block:\n\ndevtools::install_github(\"gerkovink/roundR\")\n\nwhere you replace \"gerkovink/roundR\" with your GitHub handle and repository name."
  },
  {
    "objectID": "tutorial_3.html#advanced-topics",
    "href": "tutorial_3.html#advanced-topics",
    "title": "Tutorial 3",
    "section": "Advanced topics",
    "text": "Advanced topics\n\n\n\n\nPotential next steps include:\n\nCreating package documentation (e.g. vignettes)\nCreating a hex logo (e.g. with hexmake)\nCreating a package website (e.g. with pkgdown)\nChecking the FAIR-ness of your package (e.g. with howfairis, or BadgeApp)\nChecking the code coverage of your package (e.g. with Codecov)\nMaintaining the package (e.g. with GitHub issues)\nMaintaining contributions (e.g. with a code of conduct)"
  },
  {
    "objectID": "tutorial_3.html#other-useful-sources",
    "href": "tutorial_3.html#other-useful-sources",
    "title": "Tutorial 3",
    "section": "Other useful sources",
    "text": "Other useful sources\n\nThe R Packages book by Hadley Wickham and Jenny Bryan"
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Lecture slides\nHieronder vind je de lecture slides voor de verschillende onderdelen van de cursus.\n\nLecture 1: Introduction to reproducibility, Quarto and Research Compendiums"
  },
  {
    "objectID": "slides/lec-1.html",
    "href": "slides/lec-1.html",
    "title": "All flavors markdown",
    "section": "",
    "text": "I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.\nScientific references are in the footer. Opinions and figures are my own, AI generated or linked to source."
  },
  {
    "objectID": "tutorial_1.html#links-you-need",
    "href": "tutorial_1.html#links-you-need",
    "title": "Tutorial 1",
    "section": "Links you need",
    "text": "Links you need\n\nYou can find the link to the development repo of the mice package here: https://github.com/amices/mice\nThe link to the mice logo is: https://amices.org/mice/logo.png"
  },
  {
    "objectID": "tutorial_1.html#what-it-should-look-like",
    "href": "tutorial_1.html#what-it-should-look-like",
    "title": "Tutorial 1",
    "section": "What It Should Look Like",
    "text": "What It Should Look Like\nBelow is an image of the rendered output. Try to recreate it in your Quarto document."
  },
  {
    "objectID": "tutorial_1.html#dont-struggle-for-too-long",
    "href": "tutorial_1.html#dont-struggle-for-too-long",
    "title": "Tutorial 1",
    "section": "Don’t struggle for too long",
    "text": "Don’t struggle for too long\n\n\n\n\n\n\nExpand to see the solution\n\n\n\n\n\n# Meet `Quarto`\n\n`Quarto` enables you to weave together content and executable code into a finished document. \nTo learn more about Quarto see [https://quarto.org](https://quarto.org).\n\n# Meet the `boys` data \nThe `boys` data from the [`mice`](https://github.com/amices/mice){.pkg} package in [`R`]{.proglang} is a random sample of 10% from the cross-sectional data used to construct the Dutch growth references 1997. Variables `gen` and `phb` are ordered factors. `reg` is a factor.\n\nThe following table shows the first 6 rows of the `boys` data.\n\n:::: {.columns}\n::: {.column width=\"60%\"}\n```{r}\nhead(mice::boys)\n```\n:::\n\n::: {.column width=\"40%\"}\n![](https://amices.org/mice/logo.png){fig-align=\"right\" width=60%}\n:::\n::::"
  },
  {
    "objectID": "tutorial_1.html#references",
    "href": "tutorial_1.html#references",
    "title": "Tutorial 1",
    "section": "References",
    "text": "References\nNow let’s start with a quick investigation into the boys data and its missingness.\n\nAdd the following syntax with code block to your Quarto document:\n\nNot every value in the `mice::boys` set is observed. This may pose problems with the analysis of the `boys` data. To get an idea about the problem, we can use missing data patterns. created the [`ggmice`](https://github.com/amices/ggmice){.pkg} package to create a [`ggplot2`](https://ggplot2.tidyverse.org){.pkg} [@ggplot2] type plot of the missing values in the `boys` data.\n\n```{r mdpattern}\nlibrary(mice)\nlibrary(ggmice)\n\n# visualize ggplot2-like missing data pattern\nmice::boys |&gt; \n  ggmice::plot_pattern()\n```\nThe above syntax uses the Quarto referencing environment to create a reference for the ggplot2 package.\n\nFor the referencing to work, you need to add the references.bib file to your project. You can find the file in the docs folder of your project. Add the following line to the YAML front matter of your Quarto document.\n\nbibliography: references.bib\n\nFind the reference for R, for package ggmice and for package mice HINT: You can use the \\citation() function in R\nAdd the references to text, where the reference for ggmice should be a ## renv"
  },
  {
    "objectID": "tutorial_1.html#renv",
    "href": "tutorial_1.html#renv",
    "title": "Tutorial 1",
    "section": "renv",
    "text": "renv"
  },
  {
    "objectID": "tutorial_1.html#load-scripts",
    "href": "tutorial_1.html#load-scripts",
    "title": "Tutorial 1",
    "section": "Load scripts",
    "text": "Load scripts"
  },
  {
    "objectID": "tutorial_2.html#create-a-new-repository-on-github",
    "href": "tutorial_2.html#create-a-new-repository-on-github",
    "title": "Tutorial 2",
    "section": "1. Create a new repository on GitHub",
    "text": "1. Create a new repository on GitHub"
  },
  {
    "objectID": "tutorial_2.html#fork-the-repository",
    "href": "tutorial_2.html#fork-the-repository",
    "title": "Tutorial 2",
    "section": "2. Fork the repository",
    "text": "2. Fork the repository"
  },
  {
    "objectID": "tutorial_2.html#create-a-new-branch",
    "href": "tutorial_2.html#create-a-new-branch",
    "title": "Tutorial 2",
    "section": "3. Create a new branch",
    "text": "3. Create a new branch"
  },
  {
    "objectID": "tutorial_2.html#adjust-the-compendium",
    "href": "tutorial_2.html#adjust-the-compendium",
    "title": "Tutorial 2",
    "section": "4. Adjust the compendium",
    "text": "4. Adjust the compendium"
  },
  {
    "objectID": "tutorial_2.html#create-a-pull-request",
    "href": "tutorial_2.html#create-a-pull-request",
    "title": "Tutorial 2",
    "section": "5. Create a pull request",
    "text": "5. Create a pull request"
  },
  {
    "objectID": "tutorial_2.html#review-the-pull-request",
    "href": "tutorial_2.html#review-the-pull-request",
    "title": "Tutorial 2",
    "section": "6. Review the pull request",
    "text": "6. Review the pull request"
  },
  {
    "objectID": "tutorial_2.html#merge-the-pull-request",
    "href": "tutorial_2.html#merge-the-pull-request",
    "title": "Tutorial 2",
    "section": "7. Merge the pull request",
    "text": "7. Merge the pull request\n::"
  },
  {
    "objectID": "final.html",
    "href": "final.html",
    "title": "Final Hand-in",
    "section": "",
    "text": "To finalize the day:\n\nFork this repository and create a new branch\nAdjust the readme to add your content in the following way\n\n\nyour name\n\nyour Tutorial 2 GitHub repo AND a link to your rendered Quarto (i.e. html) file.\na link to the Zenodo entry of your personal R-package\n\n\n\nPropose the changes in a Pull Request to the original repository\n\nDone!"
  },
  {
    "objectID": "slides/lec-1.html#disclaimer-2",
    "href": "slides/lec-1.html#disclaimer-2",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Disclaimer #2",
    "text": "Disclaimer #2\nWe have limited time and so much to talk about. Today we therefore focus on creating reproducible research compendiums with Quarto and developing R packages with RStudio.\nWe will not focus on programming. After all, programming you learn by doing, not by listening. If you’d like to learn more about programming, I suggest you take a look at the following resources: https://www.gerkovink.com/rijkR/. This is last year’s iteration of a different version of this course, but it contains a lot of useful information.\nThat said, let’s at least cover the programming basics."
  },
  {
    "objectID": "slides/lec-1.html#r-programming-basics",
    "href": "slides/lec-1.html#r-programming-basics",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "R Programming basics",
    "text": "R Programming basics\n\nclasses in R\nvectors, matrices, arrays, data frames, tibbles\npipes\n\n|&gt;, %&gt;%, %$%, %T&gt;%, %&lt;&gt;%.\n\nfuture\npurrr and the map/Reduce workflows\nggplot2 and plotly\ntargets (formerly drake)\nrng’s and set.seed()"
  },
  {
    "objectID": "slides/lec-1.html#this-lecture",
    "href": "slides/lec-1.html#this-lecture",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "This lecture",
    "text": "This lecture\n\nReproducibility\nResearch compendiums\nQuarto"
  },
  {
    "objectID": "slides/lec-1.html#why-bother",
    "href": "slides/lec-1.html#why-bother",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Why bother?",
    "text": "Why bother?\nWe would like our results to be as fully reproducible as possible:\nA. Reproducibility is one of the pillars of science\n\nIt is the standard by which to judge scientific claims\nIt helps the cumulative growth of knowledge - no duplication of effort\n\nB. Reproducibility may greatly benefit you\n\nYou’ll develop better work habits\nBetter teamwork - especially with new team members\nChanging or amending your work is much easier\nHigher research impact - more likely to be picked up and cited"
  },
  {
    "objectID": "slides/lec-1.html#by-the-end-of-this-class",
    "href": "slides/lec-1.html#by-the-end-of-this-class",
    "title": "All flavors markdown",
    "section": "By the end of this class…",
    "text": "By the end of this class…\n\n… you will have heard what reproducible research and programming is and why it is important\n… you will be able to produce a reproducible research archive from scratch"
  },
  {
    "objectID": "slides/lec-1.html#definition",
    "href": "slides/lec-1.html#definition",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Definition",
    "text": "Definition\n\n\nA result is reproducible when the same analysis steps performed on the same dataset consistently produces the same answer.\n\n\nThe Turing way"
  },
  {
    "objectID": "slides/lec-1.html#true-or-false",
    "href": "slides/lec-1.html#true-or-false",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "True or false?",
    "text": "True or false?\n\nIn computational sciences - such as ours - simply having the data and code means that the results are not only replicable, but fully reproducible."
  },
  {
    "objectID": "slides/lec-1.html#reproducibility-of-r-scripts",
    "href": "slides/lec-1.html#reproducibility-of-r-scripts",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Reproducibility of R scripts",
    "text": "Reproducibility of R scripts\nReproducible research is not the norm:\n\n74% of R files failed to complete without error\n\n\n\n\nTrisovic, Lau, Pasquier, et al., 2022"
  },
  {
    "objectID": "slides/lec-1.html#research-compendium",
    "href": "slides/lec-1.html#research-compendium",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Research compendium",
    "text": "Research compendium"
  },
  {
    "objectID": "slides/lec-1.html#definition-1",
    "href": "slides/lec-1.html#definition-1",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Definition",
    "text": "Definition\n\n“A research compendium is a collection of all digital parts of a research project including\n\ndata,\ncode,\ntexts\n…\n\nThe collection is created in such a way that reproducing all results is straightforward”1\n“The compendium serves as a means for distributing, managing, and updating the collection”2\n\nThe Turing WayGentleman & Temple Lang (2007)"
  },
  {
    "objectID": "slides/lec-1.html#basic-compendium",
    "href": "slides/lec-1.html#basic-compendium",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "Basic compendium",
    "text": "Basic compendium\nA basic research compendium is just a folder…\n\n\ncompendium/\n├── data\n│   └── my_data.csv\n├── analysis\n│   └── my_script.R\n├── requirements.txt\n└── README.md"
  },
  {
    "objectID": "slides/lec-1.html#not-so-basic-compendium",
    "href": "slides/lec-1.html#not-so-basic-compendium",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "(Not so) basic compendium",
    "text": "(Not so) basic compendium\n… but it can become extensive…\n|\n├── paper/\n│   ├── paper.qmd       \n│   └── references.bib  \n| \n├── figures/            \n|\n├── data/\n│   ├── raw_data/       \n│   └── clean_data/   \n|\n└── templates\n    └── journal_template.csl"
  },
  {
    "objectID": "slides/lec-1.html#not-so-basic-compendium-1",
    "href": "slides/lec-1.html#not-so-basic-compendium-1",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "(Not so) basic compendium",
    "text": "(Not so) basic compendium\n…or even executable!\n|\n├── _targets.R\n├── R/\n│   ├── functions_data.R\n│   ├── functions_analysis.R\n│   ├── functions_visualization.R\n└── data/\n    └── input_data.csv"
  },
  {
    "objectID": "slides/lec-1.html#by-the-end-of-today",
    "href": "slides/lec-1.html#by-the-end-of-today",
    "title": "Quarto, RStudio and Reproducibility",
    "section": "By the end of today…",
    "text": "By the end of today…\n\n… you will have heard what reproducible research and programming is and why it is important\n… you will be able to produce a reproducible research archive from scratch\n… you’ll have published an open R package with proper unit tests\n… and much more!"
  },
  {
    "objectID": "tutorial_2.html#git",
    "href": "tutorial_2.html#git",
    "title": "Tutorial 2",
    "section": "Git",
    "text": "Git\nGit is a free and open source version control system for text files. It can handle extensive change logging for you, no matter the size of the project. Git is fast and efficient, but its effectiveness depends also on the frequency you instruct it to log your project’s changes.\nYou can see Git as a blank canvas that starts at a certain point in time. Every time you (or others) instruct Git to log any changes that have been made, Git adds the changes that are made to this canvas. We call the changes to the canvas commits. With every commit an extensive log is created that includes at least the following information:\n\nthe changes made\nwho made the changes\nmetadata\na small piece of text that describe the changes made\n\nThe difference between two commits - or the changes between them - are called diffs.\nIf you’d like to know much more about Git, this online book is a very good resource. If you’d like to practice with the command line interface use this webpage for a quick course. This book covers pretty much everything you need to marry Git and R."
  },
  {
    "objectID": "tutorial_2.html#github",
    "href": "tutorial_2.html#github",
    "title": "Tutorial 2",
    "section": "GitHub",
    "text": "GitHub\nGitHub is the social and user interface to Git that allows you to work in repositories. These repositories can be seen as project folders in which you publish your work, but you can also use them as test sites for development, testing, etcetera. There is a distinction between private repositories (only for you and those you grant access) and public repositories (visible for everyone).\nYour public repositories can be viewed and forked by everyone. Forking is when other people create a copy of your repository on their own account. This allows them to work on a repository without affecting the master. You can also do this yourself, but then the process is called branching instead of forking. If you create a copy of a repository that is offline, the process is called cloning.\nGitHub’s ability to branch, fork and clone is very useful as it allows other people and yourself to experiment on (the code in) a repository before any definitive changes are merged with the master. If you’re working in a forked repository, you can submit a pull request to the repository collaborators to accept (or reject) any suggested changes.\nFor now, this may be confusing, but I hope you recognize the benefits GitHub can have on the process of development and bug-fixing. For example, the most up-to-date version of the mice package in R can be directly installed from the mice repository with the following code:\n\ninstall.packages(\"devtools\")\ndevtools::install_github(repo = \"stefvanbuuren/mice\")\n\nYou can see that this process requires package devtools that expands the R functionality with essential development tools. Loading packages in R directly from their respective GitHub repositories, allows you to obtain the latest - often improved and less buggy - iteration of that software even before it is published on CRAN."
  },
  {
    "objectID": "tutorial_2.html#to-continue",
    "href": "tutorial_2.html#to-continue",
    "title": "Tutorial 2",
    "section": "To continue",
    "text": "To continue\nIf you have time left, you can experiment with making your compendium into a target-powered data analylis pipeline. See this link for more details."
  }
]